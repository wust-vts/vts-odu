//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace YimaEncNavigator.wsWebSensor {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsWebSensorSoap", Namespace="http://tempuri.org/")]
    public partial class wsWebSensor : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetDeviceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistorySensorDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoryPositionDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsWebSensor() {
            this.Url = global::YimaEncNavigator.Properties.Settings.Default.YimaEncNavigator_wsWebSensor_wsWebSensor;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetDeviceListCompletedEventHandler GetDeviceListCompleted;
        
        /// <remarks/>
        public event GetHistorySensorDataCompletedEventHandler GetHistorySensorDataCompleted;
        
        /// <remarks/>
        public event GetHistoryPositionDataCompletedEventHandler GetHistoryPositionDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDeviceList(string user, string password) {
            object[] results = this.Invoke("GetDeviceList", new object[] {
                        user,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceListAsync(string user, string password) {
            this.GetDeviceListAsync(user, password, null);
        }
        
        /// <remarks/>
        public void GetDeviceListAsync(string user, string password, object userState) {
            if ((this.GetDeviceListOperationCompleted == null)) {
                this.GetDeviceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceListOperationCompleted);
            }
            this.InvokeAsync("GetDeviceList", new object[] {
                        user,
                        password}, this.GetDeviceListOperationCompleted, userState);
        }
        
        private void OnGetDeviceListOperationCompleted(object arg) {
            if ((this.GetDeviceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceListCompleted(this, new GetDeviceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHistorySensorData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetHistorySensorData(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd) {
            object[] results = this.Invoke("GetHistorySensorData", new object[] {
                        user,
                        password,
                        sId,
                        dtBegin,
                        dtEnd});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistorySensorDataAsync(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd) {
            this.GetHistorySensorDataAsync(user, password, sId, dtBegin, dtEnd, null);
        }
        
        /// <remarks/>
        public void GetHistorySensorDataAsync(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.GetHistorySensorDataOperationCompleted == null)) {
                this.GetHistorySensorDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistorySensorDataOperationCompleted);
            }
            this.InvokeAsync("GetHistorySensorData", new object[] {
                        user,
                        password,
                        sId,
                        dtBegin,
                        dtEnd}, this.GetHistorySensorDataOperationCompleted, userState);
        }
        
        private void OnGetHistorySensorDataOperationCompleted(object arg) {
            if ((this.GetHistorySensorDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistorySensorDataCompleted(this, new GetHistorySensorDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHistoryPositionData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetHistoryPositionData(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd) {
            object[] results = this.Invoke("GetHistoryPositionData", new object[] {
                        user,
                        password,
                        sId,
                        dtBegin,
                        dtEnd});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoryPositionDataAsync(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd) {
            this.GetHistoryPositionDataAsync(user, password, sId, dtBegin, dtEnd, null);
        }
        
        /// <remarks/>
        public void GetHistoryPositionDataAsync(string user, string password, string sId, System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.GetHistoryPositionDataOperationCompleted == null)) {
                this.GetHistoryPositionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoryPositionDataOperationCompleted);
            }
            this.InvokeAsync("GetHistoryPositionData", new object[] {
                        user,
                        password,
                        sId,
                        dtBegin,
                        dtEnd}, this.GetHistoryPositionDataOperationCompleted, userState);
        }
        
        private void OnGetHistoryPositionDataOperationCompleted(object arg) {
            if ((this.GetHistoryPositionDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoryPositionDataCompleted(this, new GetHistoryPositionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetDeviceListCompletedEventHandler(object sender, GetDeviceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetHistorySensorDataCompletedEventHandler(object sender, GetHistorySensorDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistorySensorDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistorySensorDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void GetHistoryPositionDataCompletedEventHandler(object sender, GetHistoryPositionDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoryPositionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoryPositionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591