using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace YimaEncNavigator
{
    public partial class Form_AddObjectCircle : Form
    {
        public int m_iObjAttrType;//物标属性类型:一般线、矩形线、圆线等、SPECIAL_LINE_TYPE类型
        public int m_iLayerPos;//图层索引
        public int m_iObjPos;//物标索引
        public int m_iCurObjectGeoType;//当前物标的类型：点、线、面，M_GEO_TYPE类型
        private bool m_bSaveObjectOk;//是否已经保存成功

        //--------------圆-----------------
        private M_POINT m_mStartGeoPo;//圆心
        private M_POINT m_mEndGeoPo;//边上某点
        private bool m_bSetStartGeoPo;//是否设置了第一个点
        public Form_AddObjectCircle()
        {
            InitializeComponent();
        }

        private void Form_AddObjectCircle_Load(object sender, EventArgs e)
        {
            this.m_iLayerPos = -1;
            this.m_iObjPos = -1;
            this.m_mStartGeoPo = new M_POINT();
            this.m_mEndGeoPo = new M_POINT();
            this.m_bSetStartGeoPo = false;
            this.textBox_name.Text = "圆";
            this.textBox_circleRKm.Text = "0(千米)";
            this.textBox_circleRKm.Enabled = false;
        }

        //设置绘制的类型
        public void SetObjGeoType(int iObjectGeoType,int iObjectAttrType)
        {
            this.m_iCurObjectGeoType = iObjectGeoType;
            this.m_iObjAttrType = iObjectAttrType;
            //设置标签是否启用
            this.trackBar_opacity.Enabled = true;
            this.checkBox_drawLine.Checked = true;
            this.checkBox_drawLine.Enabled = true;
            this.checkBox_fillColor.Checked = true;
            this.checkBox_fillColor.Enabled = true;
            this.linkLabel_fillColor.Enabled = true;
            this.textBox_fillColorRGB.Enabled = true;
            this.label_opacity.Enabled = true;
            if(this.m_iCurObjectGeoType == (int)M_GEO_TYPE.TYPE_LINE)//绘制线
            {
                this.trackBar_opacity.Enabled = false;
                this.checkBox_drawLine.Checked = true;
                this.checkBox_drawLine.Enabled = false;
                this.checkBox_fillColor.Checked = false;
                this.checkBox_fillColor.Enabled = false;
                this.linkLabel_fillColor.Enabled = false;
                this.textBox_fillColorRGB.Enabled = false;
                this.label_opacity.Enabled = false;
            }
            else
            {

            }
                
        }
        //添加节点坐标
        public void AddNewGeoPo(M_POINT curGeoPo)
        {
            if (m_bSetStartGeoPo)
            {
                this.m_mEndGeoPo = curGeoPo;
                //计算半径
                double dDis = ((FormMain)this.Owner).ymEncCtrl.GetDistBetwTwoPoint(this.m_mStartGeoPo.x, this.m_mStartGeoPo.y, this.m_mEndGeoPo.x, this.m_mEndGeoPo.y);
                this.textBox_circleR.Text = dDis.ToString("#0.0000");
            }
            else
            {
                this.m_mStartGeoPo = curGeoPo;
                this.textBox_lon.Text = InteropEncDotNet.GetDegreeStringFromGeoCoor_new(true, curGeoPo.x, 10000000, 3);
                this.textBox_lat.Text = InteropEncDotNet.GetDegreeStringFromGeoCoor_new(true, curGeoPo.y, 10000000, 3);
                this.m_bSetStartGeoPo = true;
            }
        }

        public void SetNewGeoPoByMouseMove(M_POINT curGeoPo)
        {
            if (m_bSetStartGeoPo)
            {
                this.m_mEndGeoPo = curGeoPo;
                //计算半径
                double dDis = ((FormMain)this.Owner).ymEncCtrl.GetDistBetwTwoPoint(this.m_mStartGeoPo.x, this.m_mStartGeoPo.y, this.m_mEndGeoPo.x, this.m_mEndGeoPo.y);
                this.textBox_circleR.Text = dDis.ToString("#0.0000");
            }
            else
            {
                this.m_mStartGeoPo = curGeoPo;
                this.textBox_lon.Text = InteropEncDotNet.GetDegreeStringFromGeoCoor_new(true, curGeoPo.x, 10000000, 3);
                this.textBox_lat.Text = InteropEncDotNet.GetDegreeStringFromGeoCoor_new(true, curGeoPo.y, 10000000, 3);
            }
        }
        public void SetPointObjectPos(int iLayerPos, int iObjectPos)
        {
            this.m_iLayerPos = iLayerPos;
            this.m_iObjPos = iObjectPos;
        }

        private void button_save_Click(object sender, EventArgs e)
        {
            if (this.m_iLayerPos < 0)
            {
                MessageBox.Show("没有对应的图层。" + this.m_iLayerPos);
                return;
            }
            string strObjName = this.textBox_name.Text;
            string strObjText = strObjName;
            string strContent = this.textBox_content.Text;

            string strLon = this.textBox_lon.Text.Trim();
            string strLat = this.textBox_lat.Text.Trim();
            string strCircleR = this.textBox_circleR.Text.Trim();

            try
            {
                double dCircleRHaili = Convert.ToDouble(strCircleR);
                this.m_mStartGeoPo.x = InteropEncDotNet.GetGeoCoorFromDegreeString(true, strLon);
                this.m_mStartGeoPo.y = InteropEncDotNet.GetGeoCoorFromDegreeString(true, strLat);

                if (this.m_mStartGeoPo.x == 0 && this.m_mStartGeoPo.y == 0)
                {
                    MessageBox.Show("请输入圆心坐标。");
                    return;
                }

                ((FormMain)this.Owner).ymEncCtrl.GetDesPointOfCrsAndDist(this.m_mStartGeoPo.x, this.m_mStartGeoPo.y, dCircleRHaili, 
                    45, ref this.m_mEndGeoPo.x, ref this.m_mEndGeoPo.y);

                int iObjGeoPoCount = 2;
                M_POINT[] arrGeoPo = new M_POINT[iObjGeoPoCount];
                arrGeoPo[0] = this.m_mStartGeoPo;
                arrGeoPo[1] = this.m_mEndGeoPo;

                string strGeoPo = InteropEncDotNet.GetStringFromPointArray(arrGeoPo, iObjGeoPoCount);

                M_COLOR textColor = new M_COLOR(255, 0, 0);
                M_POINT mTextOffsetPo = new M_POINT(15, -10);

                if (this.m_iObjPos < 0)
                {
                    bool bAddNewObj = ((FormMain)this.Owner).ymEncCtrl.tmAppendObjectInLayer(this.m_iLayerPos, this.m_iCurObjectGeoType);
                    if (bAddNewObj == false)
                    {
                        MessageBox.Show("添加标绘到引擎失败。");
                        return;
                    }
                    this.m_iObjPos = ((FormMain)this.Owner).ymEncCtrl.tmGetLayerObjectCount(this.m_iLayerPos) - 1;
                    ((FormMain)this.Owner).ymEncCtrl.tmSetObjectAsSpecialType(this.m_iLayerPos, this.m_iObjPos, this.m_iObjAttrType);

                }

                ((FormMain)this.Owner).EndDrawObject();//结束绘制

                //设置坐标
                string strObjGeoPo = InteropEncDotNet.GetStringFromPointArray(arrGeoPo, iObjGeoPoCount);
                ((FormMain)this.Owner).ymEncCtrl.tmSetLineObjectCoors(this.m_iLayerPos, this.m_iObjPos, iObjGeoPoCount, ref strObjGeoPo);

                //设置样式
                Byte iR = 0;
                Byte iG = 0;
                Byte iB = 0;
                string strColor = this.textBox_LineColorRGB.Text.Trim();
                string[] arrColorValue = strColor.Replace('，', ',').Split(',');

                try
                {
                    iR = Convert.ToByte(arrColorValue[0]);
                    iG = Convert.ToByte(arrColorValue[1]);
                    iB = Convert.ToByte(arrColorValue[2]);
                }
                catch (Exception ex)
                {
                    ex.ToString();
                }

                M_COLOR lineColor = new M_COLOR(iR, iG, iB);
                int iLineSize = 2;

                ((FormMain)this.Owner).ymEncCtrl.tmSetLineObjectStyle(this.m_iLayerPos, this.m_iObjPos, true, true, 0, 0, iLineSize, lineColor.ToInt(), 0, 0, strObjName, "宋体", 14, textColor.ToInt(), true, false, 0, 0, true);
                //((Form1)this.Owner).ymEncCtrl.tmSetObjectTextRotate(this.m_iLayerPos, this.m_iObjPos, 30);

                //刷新海图
                ((FormMain)this.Owner).RedrawMapScreen();
                MessageBox.Show("添加标绘成功.");
                this.m_bSaveObjectOk = true;
                this.Close();
            }
            catch(Exception ex)
            {
                MessageBox.Show("添加标绘失败.");
            }
        }

        private void textBox_circleR_TextChanged(object sender, EventArgs e)
        {
            string strCircleR = this.textBox_circleR.Text.Trim();
            try
            {
                double dCircleR = Convert.ToDouble(strCircleR);
                double dCircleKm = dCircleR * 1.852;
                this.textBox_circleRKm.Text = dCircleKm.ToString("#0.000") + "(千米)";
            }
            catch(Exception ex)
            { }
        }

        private void linkLabel_selColor_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ColorDialog curColorDlg = new ColorDialog();
            if (curColorDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                this.textBox_LineColorRGB.Text = curColorDlg.Color.R.ToString();
                this.textBox_LineColorRGB.Text += "," + curColorDlg.Color.G.ToString();
                this.textBox_LineColorRGB.Text += "," + curColorDlg.Color.B.ToString();
            }
        }

        private void linkLabel_fillColor_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            ColorDialog curColorDlg = new ColorDialog();
            if (curColorDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                this.textBox_fillColorRGB.Text = curColorDlg.Color.R.ToString();
                this.textBox_fillColorRGB.Text += "," + curColorDlg.Color.G.ToString();
                this.textBox_fillColorRGB.Text += "," + curColorDlg.Color.B.ToString();
            }
        }

        private void textBox_LineColorRGB_TextChanged(object sender, EventArgs e)
        {
            Byte iR = 0;
            Byte iG = 0;
            Byte iB = 0;
            string strColor = this.textBox_LineColorRGB.Text.Trim();
            string[] arrColorValue = strColor.Replace('，', ',').Split(',');

            try
            {
                iR = Convert.ToByte(arrColorValue[0]);
                iG = Convert.ToByte(arrColorValue[1]);
                iB = Convert.ToByte(arrColorValue[2]);
                this.linkLabel_selColor.LinkColor = System.Drawing.Color.FromArgb(iR, iG, iB);
            }
            catch (Exception ex)
            {

            }
        }

        private void textBox_fillColorRGB_TextChanged(object sender, EventArgs e)
        {
            Byte iR = 0;
            Byte iG = 0;
            Byte iB = 0;
            string strColor = this.textBox_fillColorRGB.Text.Trim();
            string[] arrColorValue = strColor.Replace('，', ',').Split(',');

            try
            {
                iR = Convert.ToByte(arrColorValue[0]);
                iG = Convert.ToByte(arrColorValue[1]);
                iB = Convert.ToByte(arrColorValue[2]);
                this.linkLabel_fillColor.LinkColor = System.Drawing.Color.FromArgb(iR, iG, iB);
            }
            catch (Exception ex)
            {

            }
        }        
    }
}
