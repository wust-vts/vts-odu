using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace YimaEncNavigator
{
    public partial class FormLibLineStyleViewDlg : Form
    {
        int PER_PAGE_STYLE_COUNT = 28;
        int m_iCurPageNum = 0;
        public int m_iEditingUserMapLayerNum;
        public int innerLayerObjPos;
        int libLineStyleCount;
        int pageCount;

        public FormLibLineStyleViewDlg()
        {
            InitializeComponent();
        }

        private void FormLibLineStyleViewDlg_Load(object sender, EventArgs e)
        {

            //innerLayerObjPos = ((Form1)this.Owner).ymEncCtrl.tmGetLayerObjectCount(m_iEditingUserMapLayerNum) - 1;
            libLineStyleCount = ((FormMain)this.Owner).ymEncCtrl.GetLibLineStyleCount();
            pageCount = libLineStyleCount / PER_PAGE_STYLE_COUNT + (libLineStyleCount % PER_PAGE_STYLE_COUNT == 0 ? 0 : 1);
            if (pageCount > 1)
            {
                this.btnNextPage.Visible = true;
            }
        }

        #region 画出线型风格
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            Graphics g = e.Graphics;
            IntPtr hdc = g.GetHdc();

            ((FormMain)this.Owner).ymEncCtrl.RefreshDrawerForDirectDrawDC((int)hdc, 500, 600, 0, 0, 1, 0);
            
            int libLineStylePoX, libLineStylePoY,iCurlibLineStyleNum;           
            M_POINT[] linePoints = new M_POINT[2];
  
            ((FormMain)this.Owner).ymEncCtrl.SetCurrentFont("宋体", 15, 0, 0, 0);
            for (int sNum = 0; sNum < PER_PAGE_STYLE_COUNT; sNum++)
            {
                libLineStylePoX = 50 + (sNum % 2) * 150;
                libLineStylePoY = 50 + (sNum / 2) * 50;
                linePoints[0] = new M_POINT(libLineStylePoX, libLineStylePoY);
                linePoints[1] = new M_POINT(libLineStylePoX + 100, libLineStylePoY);

                iCurlibLineStyleNum = sNum + m_iCurPageNum * PER_PAGE_STYLE_COUNT;
                if (iCurlibLineStyleNum >= libLineStyleCount)
                {                    
                    break;
                }
                int libLineStyleID = ((FormMain)this.Owner).ymEncCtrl.GetLibLineStyleIDFromPos(iCurlibLineStyleNum);

                string strLinePoints = InteropEncDotNet.GetStringFromPointArray(linePoints, 2);
                ((FormMain)this.Owner).ymEncCtrl.TextOutAtPoint(libLineStyleID.ToString()+".", libLineStylePoX - 20, libLineStylePoY - 8);
                ((FormMain)this.Owner).ymEncCtrl.DrawLineWithLibLineStyle(libLineStyleID, ref strLinePoints, 2, false, 0, false, 0);
            }

            if (!txtBoxLineId.Text.Equals(""))
            {
                libLineStylePoX = this.groupBox1.Location.X + this.groupBox3.Location.X + 30;
                libLineStylePoY = this.groupBox1.Location.Y + this.groupBox3.Location.Y + this.groupBox3.Height / 2;

                linePoints[0] = new M_POINT(libLineStylePoX, libLineStylePoY);
                linePoints[1] = new M_POINT(libLineStylePoX + 125, libLineStylePoY);
                string strLinePoints = InteropEncDotNet.GetStringFromPointArray(linePoints, 2);
                int libLineStyleID = Convert.ToInt32(txtBoxLineId.Text.Trim());
                int iColor = GetColor();
                int ratio = GetLineWidth();
                ((FormMain)this.Owner).ymEncCtrl.DrawLineWithLibLineStyle(libLineStyleID, ref strLinePoints, 2, true, iColor, true, ratio);
            }

            ((FormMain)this.Owner).ymEncCtrl.RefreshDrawer((int)((FormMain)this.Owner).Handle, 0, 0, 0, 0);
            g.ReleaseHdc();
            g.Dispose();
        }
        #endregion

        private void btnOk_Click(object sender, EventArgs e)
        {
            if (!CheckInfo.isNumber(txtBoxLineId.Text.Trim(), 0))
            {
                return;
            }
            int selectID = Convert.ToInt32(txtBoxLineId.Text);
            int iColor = GetColor();
            int ratio = GetLineWidth();
            bool bSetColor = this.checkBoxColor.Checked;
            bool bSetWidth = this.checkBoxWidth.Checked;
            ((FormMain)this.Owner).ymEncCtrl.tmSetLineObjectStyleRefLib(m_iEditingUserMapLayerNum, innerLayerObjPos, selectID, bSetColor, iColor, bSetWidth, ratio);
            this.Close();
        }

        private void gBoxLineStyle_MouseCaptureChanged(object sender, EventArgs e)
        {
            M_POINT point = new M_POINT(this.PointToClient(Cursor.Position).X, this.PointToClient(Cursor.Position).Y);

            for (int sNum = 0; sNum < PER_PAGE_STYLE_COUNT; sNum++)
            {
                int symbolPoX = 50 + (sNum % 2) * 200;
                int symbolPoY = 50 + (sNum / 2) * 50;
                int iCurSymbolNum = sNum + m_iCurPageNum * PER_PAGE_STYLE_COUNT;
                if (iCurSymbolNum >= libLineStyleCount)
                {
                    break;
                }

                if (((point.x - symbolPoX) >= -25 && (point.x - symbolPoX) < 175) && Math.Abs(symbolPoY - point.y) <= 25)
                {
                    txtBoxLineId.Text = ((FormMain)this.Owner).ymEncCtrl.GetSymbolIDFromPos(iCurSymbolNum).ToString();
                    break;
                }
            }
        }

        private void txtBoxLineId_TextChanged(object sender, EventArgs e)
        {
            this.groupBox3.BackColor = this.groupBox1.BackColor = this.BackColor = System.Drawing.SystemColors.Control;
            this.groupBox3.BackColor = this.groupBox1.BackColor = System.Drawing.Color.Transparent;
        }

        private void btnColor_Click(object sender, EventArgs e)
        {
            if (this.colorDialog1.ShowDialog() == DialogResult.OK)
            {
                this.txtBoxColorR.Text = colorDialog1.Color.R.ToString();
                this.txtBoxColorG.Text = colorDialog1.Color.G.ToString();
                this.txtBoxColorB.Text = colorDialog1.Color.B.ToString();
            }
        }

        #region 把颜色的RGB转为整型
        private int GetColor()
        {
            int iColor = 0;
            string colorR = txtBoxColorR.Text.ToString();
            string colorG = txtBoxColorG.Text.ToString();
            string colorB = txtBoxColorB.Text.ToString();
            if (CheckInfo.isNumber(colorR, 0) && CheckInfo.isNumber(colorG, 0) && CheckInfo.isNumber(colorB, 0) && this.checkBoxColor.Checked)
            {
                M_COLOR mColor = new M_COLOR(Convert.ToByte(colorR), Convert.ToByte(colorG), Convert.ToByte(colorB));
                //iColor = mColor.GetHashCode();
                iColor = mColor.ToInt();
            }
            return iColor;
        }
        #endregion

        private int GetLineWidth()
        {
            int width = 0;
            if (CheckInfo.isNumber(this.txtBoxWidth.Text.Trim(), 0) && this.checkBoxWidth.Checked)
            {
                width = Convert.ToInt32(this.txtBoxWidth.Text.Trim());
            }
            return width;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Dispose();
            this.Close();
        }
    }
}
